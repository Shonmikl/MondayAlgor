package _2023_06_05.eratosphen;

//как проверить число на простоту
//проверка перебора множителей
public class PrimeTest {

    public static void main(String[] args) {
        for (int i = 1; i < 1000; i++) {
            if (isPrime(i)) {
                System.out.println(i);
            }
        }
        for (int i = 1; i < 1000; i++) {
            if (isPrimeOptimized(i)) {
                System.out.println(i);
            }
        }
    }

    private static boolean isPrime(int number) {
        //если меньше двух то простое

        if (number < 2) {
            return false;
        }

        for (int i = 2; i * i <= number; i++) {
            //если наше число поделилось на какое то без остатка
            //то это значит что наше число не простое
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }

    //есть оптимизация которая говорит о том что
    //если мы вычеркнем все числа которые деляться на 2 и на 3
    // то мы получаем закономерность
    // см. рисунок
    //все множители перебирать не нандо

    /**
     * если мы перебираем множители которые не являются простыми числами
     * то мы понимем что эти числа сами состоят из простых множителей
     * и ввиду этого при проверке числа на простоту надо просто проверить
     * делимость числа только на простые числа до корня квадратного
     * до этого числа
     */
    private static boolean isPrimeOptimized(int number) {
        if (number < 2) {
            return false;
        }
        if (number % 2 == 0) {
            //если число делиться без остатка на 2 тогда это число не простое
            //за исключением если это и есть чиало 2
            return number == 2;
        }
        if (number % 3 == 0) {
            return number == 3;
        }
        //теперь можно сделать цикл который будет идти только по парам
        //кандидатов на простые числа и проверять делимость только на них

        for (int i = 5; i * i <= number; i += 6) {//см рис 2
            if (number % i == 0 || number % (i + 2) == 0) {
                //тогда не простое число
                return false;
            }
        }
        return true;
    }
}